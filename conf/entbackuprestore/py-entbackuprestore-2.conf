ent_backup_restore.enterprise_backup_restore_test.EnterpriseBackupRestoreTest:
    #backup after rebalance is done - existing cluster
    test_backup_restore_after_rebalance,items=1000,nodes_init=2,nodes_in=1,nodes_out=1,same-cluster=True,skip_consistency=True,per_node=False,force-updates=True,GROUP=P0
    test_backup_restore_after_rebalance,items=1000,nodes_init=2,nodes_in=0,nodes_out=1,same-cluster=True,skip_consistency=True,per_node=False,force-updates=True,GROUP=P1
    test_backup_restore_after_rebalance,items=1000,nodes_init=2,nodes_in=1,nodes_out=0,same-cluster=True,skip_consistency=True,per_node=False,force-updates=True,GROUP=P1
    #backup and restore with expiration
    test_backup_restore_sanity,items=1000,expires=30,GROUP=P0
    #backup compact tests
    # Compaction for the Rift storage format is not supported in 7.0.0
    #test_backup_compact,items=1000,GROUP=P0
    test_restore_from_compacted_backup,items=1000,GROUP=P0
    #backup and restore on non master node
    test_backup_restore_sanity,items=1000,non-master=True,nodes_init=2,GROUP=P1
    #backup and restore with nodes reshuffling to different groups
    test_backup_restore_with_nodes_reshuffle,items=1000,nodes_init=2,same-cluster=True,GROUP=P1
    test_backup_restore_with_nodes_reshuffle,items=1000,nodes_init=2,same-cluster=True,replicas=0,GROUP=P1
    #backup and restore with firewall
#     test_backup_restore_with_firewall,items=1000,skip_buckets=True,should-fail=True,GROUP=P1
    #backup and restore with audit - uncomment when MB-19298 is fixed
    #test_backup_restore_with_audit,items=1000
    #backup and restore to a cluster with lesser number of nodes - nodes_init should be >= 3
    test_backup_restore_with_lesser_nodes,items=1000,nodes_init=3,GROUP=P0
    #backup and restore should skip memcached buckets
    #
    ## test restore with --map-buckets option
    test_backup_and_restore_with_map_buckets,standard_buckets=1,items=1000,GROUP=P0
    test_backup_and_restore_with_map_buckets,default_bucket=False,standard_buckets=1,items=10000,map-buckets=true,GROUP=P0
    test_backup_and_restore_with_map_buckets,items=10000,map-buckets=true,GROUP=P0
    test_backup_and_restore_with_map_buckets,items=10000,map-buckets=true,create-gsi=True,GROUP=P0
    test_backup_and_restore_with_map_buckets,items=10000,map-buckets=true,create-gsi=True,same-cluster=True,dgm_run=True,GROUP=P0
    test_backup_and_restore_with_map_buckets,items=10000,map-buckets=true,create-gsi=True,same-cluster=True,dgm_run=True,delete-old-bucket=True,GROUP=P0
    test_backup_and_restore_with_map_buckets,default_bucket=False,standard_buckets=3,items=10000,map-buckets=true,dgm_run=True,GROUP=P1
    #test_backup_and_restore_with_map_buckets,default_buckets=False,standard_buckets=1,items=10000,map-buckets=true,bucket_type=ephemeral #  should fail
    #test_backup_and_restore_with_map_buckets,standard_buckets=3,items=10000,map-buckets=true,dgm_run=True,bucket_type=ephemeral  # disable some config to make it works
    #
    #backup and restore - crash scenarios
    ## comment out failed tests testrunner but passed in manual tests.  Will remove comment when bug fixed
    #test_backup_with_erlang_crash_and_restart,items=500000,GROUP=P0
    #test_backup_with_couchbase_stop_and_start,items=300000,GROUP=P1
    #test_backup_with_memcached_crash_and_restart,items=500000,GROUP=P1
    #test_backup_with_erlang_crash,items=500000,GROUP=P1
    #test_backup_with_couchbase_stop,items=500000,GROUP=P1
    #test_backup_with_memcached_crash,items=500000,GROUP=P1
    #test_restore_with_erlang_crash_and_restart,items=500000,skip_buckets=True,GROUP=P1
    #test_restore_with_couchbase_stop_and_start,items=300000,skip_buckets=True,GROUP=P1
    #test_restore_with_memcached_crash_and_restart,items=500000,skip_buckets=True,GROUP=P1
    #test_restore_with_erlang_crash,items=500000,skip_buckets=True,GROUP=P0
    #test_restore_with_couchbase_stop,items=500000,skip_buckets=True,GROUP=P0
    #test_restore_with_memcached_crash,items=500000,skip_buckets=True,should-fail=True,GROUP=P1
    test_merge_with_crash,items=500000,GROUP=P0
    test_compact_with_crash,items=500000,GROUP=P0
    #backup merge command scenarios
    test_backup_merge,items=1000,number_of_backups=5,GROUP=P1
    test_backup_merge_with_restore,items=1000,GROUP=P0
    test_backup_merge_with_unmerged,items=1000,GROUP=P0
    #backup purge and resume scenarios
    test_backup_resume,resume=True,items=500000,GROUP=P0
    #
    ## test merge backup
    test_merge_backup_from_old_and_new_bucket,items=20000,same-cluster=True,bucket_delete=True,GROUP=P0
    test_merge_backup_from_old_and_new_bucket,items=20000,same-cluster=True,bucket_flush=True,GROUP=P1
    test_merge_backup_with_multi_threads,multi_threads=True,threads_count=2,items=50000,GROUP=P1
    test_merge_backup_with_multi_threads,multi_threads=True,threads_count=4,items=50000,GROUP=P1
    test_merge_backup_with_partial_backup,items=100000,number_of_backups=2,GROUP=P1
    test_merge_backup_with_merge_kill_and_re_merge,items=100000,number_of_backups=2,GROUP=P1
    test_merge_backup_with_purge_deleted_keys,items=100000,GROUP=P1
    test_merge_backup_with_failover_logs,items=100000,GROUP=P1
    #
    ## backup and restore with deletes
    test_backup_restore_with_deletes,items=100000,GROUP=P0
    #
    ## backup restore with short options
    test_backupmgr_with_short_option,repo=r,GROUP=P1
    test_backupmgr_with_short_option,archive=a,GROUP=P1
    test_backupmgr_with_short_option,repo=r,GROUP=P1
    test_backupmgr_with_short_option,cluster=c,GROUP=P1
    test_backupmgr_with_short_option,bkusername=u,GROUP=P1
    test_backupmgr_with_short_option,bkpassword=p,GROUP=P1
    test_backupmgr_with_short_option,command=restore,repo=r,GROUP=P1
    test_backupmgr_with_short_option,command=restore,archive=a,GROUP=P1
    test_backupmgr_with_short_option,command=restore,repo=r,GROUP=P1
    test_backupmgr_with_short_option,command=restore,cluster=c,GROUP=P1
    test_backupmgr_with_short_option,command=restore,bkusername=u,GROUP=P1
    test_backupmgr_with_short_option,command=restore,bkpassword=p,GROUP=P1
    ##
    # Backup additionally before metadata bucket creation and eventing function, ensure metadata bucket restored CBQE-5009, MB-34077
    test_cbbackupmgr_with_eventing,default_bucket=False,dataset=default,GROUP=P0,backup_before_eventing=True
    #
    test_backup_purge,purge=True,items=500000,GROUP=P0
