# coding: utf-8

"""
    Couchbase Backup Service API

    This is REST API allows users to remotely schedule and run backups, restores and merges as well as to explore various archives for all there Couchbase Clusters.  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class RepositoryScheduled(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'task_type': 'str',
        'next_run': 'str'
    }

    attribute_map = {
        'name': 'name',
        'task_type': 'task_type',
        'next_run': 'next_run'
    }

    def __init__(self, name=None, task_type=None, next_run=None):  # noqa: E501
        """RepositoryScheduled - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._task_type = None
        self._next_run = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if task_type is not None:
            self.task_type = task_type
        if next_run is not None:
            self.next_run = next_run

    @property
    def name(self):
        """Gets the name of this RepositoryScheduled.  # noqa: E501

        The task name  # noqa: E501

        :return: The name of this RepositoryScheduled.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RepositoryScheduled.

        The task name  # noqa: E501

        :param name: The name of this RepositoryScheduled.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def task_type(self):
        """Gets the task_type of this RepositoryScheduled.  # noqa: E501

        The task type  # noqa: E501

        :return: The task_type of this RepositoryScheduled.  # noqa: E501
        :rtype: str
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this RepositoryScheduled.

        The task type  # noqa: E501

        :param task_type: The task_type of this RepositoryScheduled.  # noqa: E501
        :type: str
        """
        allowed_values = ["BACKUP", "MERGE", "PRUNE"]  # noqa: E501
        if task_type not in allowed_values:
            raise ValueError(
                "Invalid value for `task_type` ({0}), must be one of {1}"  # noqa: E501
                .format(task_type, allowed_values)
            )

        self._task_type = task_type

    @property
    def next_run(self):
        """Gets the next_run of this RepositoryScheduled.  # noqa: E501

        The next run time for the task, the time is encoded using RFC3339  # noqa: E501

        :return: The next_run of this RepositoryScheduled.  # noqa: E501
        :rtype: str
        """
        return self._next_run

    @next_run.setter
    def next_run(self, next_run):
        """Sets the next_run of this RepositoryScheduled.

        The next run time for the task, the time is encoded using RFC3339  # noqa: E501

        :param next_run: The next_run of this RepositoryScheduled.  # noqa: E501
        :type: str
        """

        self._next_run = next_run

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RepositoryScheduled, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RepositoryScheduled):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
